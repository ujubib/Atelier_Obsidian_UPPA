/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinkOpenPlugin,
  globalLink: () => globalLink
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  openMethod: "modal",
  modalWidth: "80vw",
  modalHeight: "80vh"
};
var openMethods = {
  browser: "Browser",
  modal: "Obsidian Modal",
  tab: "Obsidian Tab"
};
var LinkOpenSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Link Opener Settings" });
    new import_obsidian.Setting(containerEl).setName("Open external links with").addDropdown((dd) => dd.addOptions(openMethods).setValue(this.plugin.settings.openMethod).onChange(async (value) => {
      this.plugin.settings.openMethod = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Modal Settings" });
    new import_obsidian.Setting(containerEl).setName("Modal width").setDesc("Enter any valid CSS unit").addText((text) => text.setValue(this.plugin.settings.modalWidth).onChange(async (value) => {
      this.plugin.settings.modalWidth = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Modal height").setDesc("Enter any valid CSS unit").addText((text) => text.setValue(this.plugin.settings.modalHeight).onChange(async (value) => {
      this.plugin.settings.modalHeight = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/view.ts
var import_obsidian2 = require("obsidian");
var LINK_VIEW = "link-view";
var LinkView = class extends import_obsidian2.ItemView {
  constructor(workspace, leaf, link) {
    super(leaf);
    this.workspace = workspace;
    this.link = globalLink;
  }
  getViewType() {
    return LINK_VIEW;
  }
  getDisplayText() {
    return "External Link View";
  }
  setLink(link) {
    this.link = link;
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const frame = container.createEl("iframe");
    frame.src = this.link;
    frame.setAttribute("frameborder", "0");
    frame.width = "100%";
    frame.height = "100%";
  }
  async onClose() {
  }
};

// src/modal.ts
var import_obsidian3 = require("obsidian");
var LinkModal = class extends import_obsidian3.Modal {
  constructor(app, link, width, height) {
    super(app);
    this.link = link;
    this.width = width;
    this.height = height;
  }
  onOpen() {
    const modalContainer = this.containerEl.lastChild;
    modalContainer.style.width = this.width;
    modalContainer.style.height = this.height;
    const { contentEl } = this;
    contentEl.addClass("link-modal");
    const frame = contentEl.createEl("iframe");
    frame.src = this.link;
    frame.setAttribute("frameborder", "0");
    frame.width = "100%";
    frame.height = "92%";
    const button = contentEl.createEl("button");
    button.setAttribute("onclick", `window.open("${this.link}");this.close()`);
    button.innerHTML = "Open in Browser";
    button.addClass("modal-button");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var globalLink = "";
var LinkOpenPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(LINK_VIEW, (leaf) => new LinkView(this.app.workspace, leaf, ""));
    const clickEvt = async (evt) => {
      const el = evt.target;
      if (el.classList.contains("external-link")) {
        const href = el.getAttribute("linkto");
        if (this.settings.openMethod === "modal" && href) {
          new LinkModal(this.app, href, this.settings.modalWidth, this.settings.modalHeight).open();
        } else if (this.settings.openMethod === "browser" && href) {
          window.open(href);
        } else if (this.settings.openMethod === "tab" && href) {
          globalLink = href;
          await this.app.workspace.getLeaf("tab").setViewState({ type: LINK_VIEW, active: true });
          this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(LINK_VIEW)[0]);
          return;
        }
      }
    };
    this.registerDomEvent(document, "click", (evt) => {
      evt.preventDefault();
      return clickEvt(evt);
    });
    const removeUrl = (evt) => {
      const el = evt.target;
      if (!el.classList.contains("external-link")) {
        return;
      }
      if (el.getAttribute("href") == "javascript:void(0);") {
        return;
      }
      const href = el.getAttribute("href");
      el.setAttribute("linkto", href ? href : "");
      el.setAttribute("href", "javascript:void(0);");
    };
    this.registerDomEvent(document, "mouseover", (evt) => {
      return removeUrl(evt);
    });
    this.addSettingTab(new LinkOpenSettingTab(this.app, this));
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(LINK_VIEW);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
